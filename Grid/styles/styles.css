:root {
    --color-primary: #6C38CC;
    --color-primary-hover: #5b2bb2;
    --color-secondary: #E47AD5;
    --color-text: #FAFAFA;
    --color-link-hover: #AFB2BF;
    --color-bg: #16171D;
    --color-bg-medium:#1E1F29;
    --color-bg-light: #2E2D3D;
    --color-stroke: #4D5064;
    --color-footer: #101114;

    --gradient: linear-gradient(93.33deg, #D77BE6 9.26%, #BE63E6 42.32%, #6C38CC 104.58%);

    --border-8: 8px;
    --border-10: 10px;
    --layout-width: 1172px;
}

* {
    box-sizing: border-box;
}

html {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
}

body {
    background: var(--color-bg);
    margin: 30px;
    font-family: "Fira Sans", sans-serif;
    font-style: normal;
    font-weight: 400;
}

.item {
    color: var(--color-text);
    font-size: 24px;
    font-weight: 700;
    border: 2px solid var(--color-primary);
    text-align: center;
    padding: 15px;
}

.wrapper {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); /* (3, 1fr) auto = 1fr 1fr 1fr(fraction) auto(4 колонка
    автоматически взяла оставшийся размер */

    /* Auto-fill: Создает столько колонок, сколько может поместиться, включая добавление пустых колонок,
    если элементов меньше колонок.
    Auto-fit: Заканчивает создание колонок, как только все элементы были размещены, не добавляя пустые
    колонки и убирая лишнее пространство */

    gap: 15px; /* расстояние между колонками */
    /* height: 600px;*/
    /* grid-template-rows: repeat(3, 1fr); !*высота колонки*!*/
    /* grid-auto-rows: 200px; !*высота для оставшихся колонок. 50px 200px - чередование*!*/
    /* grid-auto-flow: column; !*выводит колонки в горизонт линию*!*/

    /* justify-горизонт, align-вертикаль */
    /* items-как выравниваем ячейки, content-может перемещать весь грид к началу, концу,
    центру или растягивать равномерно, self-позволяет индивидуально выравнивать конкретный
    элемент внутри его ячейки */
    justify-items: center; /* по умолчанию всегда stretch */

    grid-template-rows: repeat(10, 100px); /* задаем значение по вертикали */
    align-items: end; /* говорим,чтобы ячейки встали в конце по вертикали */

    justify-content: start; /* весь контент встает в начало, при условии,что не установлен auto-fill/fit */
}

.item_9 {
    justify-self: end; /* берем только 9 ячейку и двигаем в конец,  работает с justify-items in wrapper */
    align-items: start; /* ячейка  будет вверху строки, работает с align-items in wrapper */
}


/*.item_11 {*/
    /*grid-column: span 2; !*элемент занимает 2 колонки по горизонту*!*/
    /*grid-row: span 2; !*элемент занимает 2 колонки по вертикали*!*/

    /* или другой вариант*/
    /*grid-column-start: 3;*/
    /*grid-column-end: 7;*/

    /*grid-column: 1 / -1; !* start 1, end -1 = колонка от начала до конца строки*!*/
    /*grid-column: 1 / span 3; !*начиная с первой линии занимает 3 колонки*!*/
    /*grid-column: span 2 / 3; !*занимает 2 колонки и заканчивается на 3 линии*!*/

    /*grid-row: 1 / -1; !*высота колонки с верха до низа при условии grid-template-rows: repeat(6, 1fr)*!*/
/*}*/

/*.wrapper {*/
/*    display: grid;*/
/*    grid-template-columns: [s-left] 200px 200px [sidebar] 1fr 1fr [s-right];*/
/*    grid-template-rows: [s-start] repeat(3, 200px) [s-end];*/
/*    gap: 15px;*/
/*}*/

/*.item_9 {*/
/*    grid-column: s-left / sidebar;*/
/*    grid-row: s-start / s-end;*/
/*}*/


/* Out Of Flow Dance: Это особое значение, позволяющее оптимизировать заполнение пустых пространств грида.
Пример: Несколько элементов имеют различный размер span. В результате размещения возникают пустые
пространства (дырки). Задав grid-auto-flow: dense, Grid будет пытаться максимально эффективно заполнить
эти пространства, перемещая элементы так, чтобы использовать доступное пространство оптимально.
 */

/* Grid template areas */
/* CSS */
.wrapper {
    display: grid;
    grid-template-rows: repeat(3, 1fr);
    grid-template-columns: repeat(4, 1fr);
    grid-template-areas:
        "header header header header"
        "sidebar content content content"
        "footer footer footer footer";
}

.header {
    grid-area: header; /* header растянется на всю ширину */
}

.sidebar {
    grid-area: sidebar; /* sidebar встанет на место, которое мы указали в areas.
    Аналогично для content и footer */
}

    /* HTML */
    /*<div class="item header">Header</div>*/
    /*<div class="item sidebar">Sidebar</div>*/
    /*<div class="item content">Content</div>*/
    /*<div class="item footer">Footer</div>*/



